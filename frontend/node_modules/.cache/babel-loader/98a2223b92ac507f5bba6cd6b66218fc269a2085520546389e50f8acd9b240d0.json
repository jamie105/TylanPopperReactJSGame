{"ast":null,"code":"var _jsxFileName = \"/home/jamie1053/Documents/CodingRelated/Personal/chatgpt-molegame/frontend/src/components/Bush.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Bush = ({\n  setScore\n}) => {\n  _s();\n  const [bushes, setBushes] = useState([]);\n  const [moleIndex, setMoleIndex] = useState(null);\n  const [moleVisible, setMoleVisible] = useState(false);\n  const [molePosition, setMolePosition] = useState({\n    x: 0,\n    y: 0\n  }); // Store mole position\n\n  useEffect(() => {\n    const newBushes = Array.from({\n      length: 7\n    }, (_, index) => ({\n      x: Math.random() * (screen.availWidth - 300) + 150,\n      y: Math.random() * (screen.availHeight / 2 - 100) + screen.availHeight / 2\n    }));\n    setBushes(newBushes);\n    const moleInterval = setInterval(() => {\n      const newIndex = Math.floor(Math.random() * 7);\n      setMoleIndex(newIndex);\n      setMoleVisible(true);\n\n      // Store mole position when it becomes visible\n      setMolePosition({\n        ...newBushes[newIndex]\n      });\n      setTimeout(() => {\n        setMoleVisible(false);\n      }, 1250);\n    }, 2000);\n    return () => {\n      clearInterval(moleInterval);\n    };\n  }, []);\n  const handleMoleClick = index => {\n    if (moleVisible && index === moleIndex) {\n      setScore(prevScore => prevScore + 1);\n      setMoleVisible(false);\n      createNewBushes(index);\n    } else {\n      createNewBushes(index);\n    }\n  };\n  const handleBushClick = index => {\n    if (!moleVisible && index === moleIndex) {\n      // If the clicked bush has no mole, do nothing\n      return;\n    }\n    createNewBushes(index); // Always create a new bush when a bush is clicked\n  };\n\n  const createNewBushes = indexToRemove => {\n    // Remove the clicked bush and create a new one\n    const newBushes = bushes.filter((_, index) => index !== indexToRemove);\n    newBushes.push({\n      x: Math.random() * (screen.availWidth - 300) + 150,\n      y: Math.random() * (screen.availHeight / 2 - 100) + screen.availHeight / 2\n    });\n    setBushes(newBushes);\n    setMoleIndex(newBushes);\n\n    // If the mole is still visible, update its position but don't change the index\n    if (moleVisible) {\n      //setMolePosition({ ...newBushes[moleIndex] });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bush-container\",\n    children: bushes.map((bush, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `bush ${moleIndex === index ? 'with-mole' : ''}`,\n      style: {\n        position: 'absolute',\n        left: `${bush.x}px`,\n        top: `${bush.y}px`,\n        width: '50px',\n        height: '50px',\n        borderRadius: '50%',\n        backgroundColor: 'darkgreen',\n        zIndex: 1\n      },\n      onClick: () => moleVisible ? handleMoleClick(index) : handleBushClick(index),\n      children: moleVisible && moleIndex === index && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mole\",\n        style: {\n          backgroundColor: 'brown',\n          width: '30px',\n          height: '30px',\n          borderRadius: '50%',\n          position: 'absolute',\n          top: `${molePosition.y - bush.y - 10}px`,\n          // Use molePosition to calculate top\n          left: `${molePosition.x - bush.x + 10}px` // Use molePosition to calculate left\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(Bush, \"eMqDYR1WxCPPjR0VHf1oxh1ow2s=\");\n_c = Bush;\nexport default Bush;\nvar _c;\n$RefreshReg$(_c, \"Bush\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Bush","setScore","_s","bushes","setBushes","moleIndex","setMoleIndex","moleVisible","setMoleVisible","molePosition","setMolePosition","x","y","newBushes","Array","from","length","_","index","Math","random","screen","availWidth","availHeight","moleInterval","setInterval","newIndex","floor","setTimeout","clearInterval","handleMoleClick","prevScore","createNewBushes","handleBushClick","indexToRemove","filter","push","className","children","map","bush","style","position","left","top","width","height","borderRadius","backgroundColor","zIndex","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jamie1053/Documents/CodingRelated/Personal/chatgpt-molegame/frontend/src/components/Bush.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst Bush = ({ setScore }) => {\n  const [bushes, setBushes] = useState([]);\n  const [moleIndex, setMoleIndex] = useState(null);\n  const [moleVisible, setMoleVisible] = useState(false);\n  const [molePosition, setMolePosition] = useState({ x: 0, y: 0 }); // Store mole position\n\n  useEffect(() => {\n    const newBushes = Array.from({ length: 7 }, (_, index) => ({\n      x: Math.random() * (screen.availWidth - 300) + 150,\n      y: Math.random() * (screen.availHeight / 2 - 100) + screen.availHeight / 2,\n    }));\n    setBushes(newBushes);\n\n    const moleInterval = setInterval(() => {\n      const newIndex = Math.floor(Math.random() * 7);\n      setMoleIndex(newIndex);\n      setMoleVisible(true);\n\n      // Store mole position when it becomes visible\n      setMolePosition({ ...newBushes[newIndex] });\n\n      setTimeout(() => {\n        setMoleVisible(false);\n      }, 1250);\n    }, 2000);\n\n    return () => {\n      clearInterval(moleInterval);\n    };\n  }, []);\n\n  const handleMoleClick = (index) => {\n    if (moleVisible && index === moleIndex) {\n      setScore(prevScore => prevScore + 1);\n      setMoleVisible(false);\n      createNewBushes(index);\n    } else {\n      createNewBushes(index);\n    }\n  };\n\n  const handleBushClick = (index) => {\n    if (!moleVisible && index === moleIndex) {\n      // If the clicked bush has no mole, do nothing\n      return;\n    }\n    createNewBushes(index); // Always create a new bush when a bush is clicked\n  };\n\n  const createNewBushes = (indexToRemove) => {\n    // Remove the clicked bush and create a new one\n    const newBushes = bushes.filter((_, index) => index !== indexToRemove);\n    newBushes.push({\n      x: Math.random() * (screen.availWidth - 300) + 150,\n      y: Math.random() * (screen.availHeight / 2 - 100) + screen.availHeight / 2,\n    });\n\n    setBushes(newBushes);\n    setMoleIndex(newBushes);\n\n    // If the mole is still visible, update its position but don't change the index\n    if (moleVisible) {\n      //setMolePosition({ ...newBushes[moleIndex] });\n    }\n  };\n\n  return (\n    <div className=\"bush-container\">\n      {bushes.map((bush, index) => (\n        <div\n          key={index}\n          className={`bush ${moleIndex === index ? 'with-mole' : ''}`}\n          style={{\n            position: 'absolute',\n            left: `${bush.x}px`,\n            top: `${bush.y}px`,\n            width: '50px',\n            height: '50px',\n            borderRadius: '50%',\n            backgroundColor: 'darkgreen',\n            zIndex: 1,\n          }}\n          onClick={() => moleVisible ? handleMoleClick(index) : handleBushClick(index)}\n        >\n          {moleVisible && moleIndex === index && (\n            <div\n              className=\"mole\"\n              style={{\n                backgroundColor: 'brown',\n                width: '30px',\n                height: '30px',\n                borderRadius: '50%',\n                position: 'absolute',\n                top: `${molePosition.y - bush.y - 10}px`, // Use molePosition to calculate top\n                left: `${molePosition.x - bush.x +10}px`, // Use molePosition to calculate left\n              }}\n            ></div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Bush;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}