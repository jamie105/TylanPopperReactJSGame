{"ast":null,"code":"var _jsxFileName = \"/home/jamie1053/Documents/CodingRelated/Personal/chatgpt-molegame/frontend/src/components/Bush.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Bush = ({\n  setScore\n}) => {\n  _s();\n  const [bushes, setBushes] = useState([]);\n  const [moleIndex, setMoleIndex] = useState(null); // Initialize moleIndex\n  const [moleVisible, setMoleVisible] = useState(false);\n  useEffect(() => {\n    // Logic to initialize the bushes array, e.g., generate random positions\n    const newBushes = Array.from({\n      length: 7\n    }, (_, index) => ({\n      x: Math.random() * 800,\n      // Adjust the range based on your design\n      y: Math.random() * 400 // Adjust the range based on your design\n    }));\n\n    setBushes(newBushes);\n\n    // Set a timer to toggle mole visibility\n    const moleTimer = setInterval(() => {\n      const newIndex = Math.floor(Math.random() * 7); // Generate a random index\n      setMoleIndex(newIndex);\n      setMoleVisible(true);\n\n      // After a short delay, hide the mole\n      setTimeout(() => {\n        setMoleVisible(false);\n      }, 500); // 500ms delay\n    }, 1500); // 1500ms interval\n\n    return () => {\n      clearInterval(moleTimer); // Clean up the timer on unmount\n    };\n  }, []);\n  const handleMoleClick = () => {\n    if (moleVisible && moleIndex !== null) {\n      // Handle mole click logic here\n      // For example, increase score, play sound, etc.\n      setScore(prevScore => prevScore + 1);\n\n      // Hide the mole\n      setMoleVisible(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bush-container\",\n    children: bushes.map((bush, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `bush ${moleIndex === index ? 'with-mole' : ''}`,\n      style: {\n        position: 'absolute',\n        left: `${bush.x}px`,\n        top: `${bush.y}px`,\n        width: '50px',\n        height: '50px',\n        borderRadius: '50%',\n        backgroundColor: 'green'\n      },\n      onClick: handleMoleClick,\n      children: moleVisible && moleIndex === index && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mole\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 50\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(Bush, \"8qiUDs8RnE6AgsUJ6P2JK7sv5po=\");\n_c = Bush;\nexport default Bush;\nvar _c;\n$RefreshReg$(_c, \"Bush\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Bush","setScore","_s","bushes","setBushes","moleIndex","setMoleIndex","moleVisible","setMoleVisible","newBushes","Array","from","length","_","index","x","Math","random","y","moleTimer","setInterval","newIndex","floor","setTimeout","clearInterval","handleMoleClick","prevScore","className","children","map","bush","style","position","left","top","width","height","borderRadius","backgroundColor","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jamie1053/Documents/CodingRelated/Personal/chatgpt-molegame/frontend/src/components/Bush.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst Bush = ({ setScore }) => {\n  const [bushes, setBushes] = useState([]);\n  const [moleIndex, setMoleIndex] = useState(null); // Initialize moleIndex\n  const [moleVisible, setMoleVisible] = useState(false);\n\n  useEffect(() => {\n    // Logic to initialize the bushes array, e.g., generate random positions\n    const newBushes = Array.from({ length: 7 }, (_, index) => ({\n      x: Math.random() * 800, // Adjust the range based on your design\n      y: Math.random() * 400, // Adjust the range based on your design\n    }));\n    setBushes(newBushes);\n\n    // Set a timer to toggle mole visibility\n    const moleTimer = setInterval(() => {\n      const newIndex = Math.floor(Math.random() * 7); // Generate a random index\n      setMoleIndex(newIndex);\n      setMoleVisible(true);\n\n      // After a short delay, hide the mole\n      setTimeout(() => {\n        setMoleVisible(false);\n      }, 500); // 500ms delay\n    }, 1500); // 1500ms interval\n\n    return () => {\n      clearInterval(moleTimer); // Clean up the timer on unmount\n    };\n  }, []);\n\n  const handleMoleClick = () => {\n    if (moleVisible && moleIndex !== null) {\n      // Handle mole click logic here\n      // For example, increase score, play sound, etc.\n      setScore(prevScore => prevScore + 1);\n\n      // Hide the mole\n      setMoleVisible(false);\n    }\n  };\n\n  return (\n    <div className=\"bush-container\">\n      {bushes.map((bush, index) => (\n        <div\n          key={index}\n          className={`bush ${moleIndex === index ? 'with-mole' : ''}`}\n          style={{\n            position: 'absolute',\n            left: `${bush.x}px`,\n            top: `${bush.y}px`,\n            width: '50px',\n            height: '50px',\n            borderRadius: '50%',\n            backgroundColor: 'green',\n          }}\n          onClick={handleMoleClick}\n        >\n          {moleVisible && moleIndex === index && <div className=\"mole\"></div>}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Bush;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}