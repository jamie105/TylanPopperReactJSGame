{"ast":null,"code":"var _jsxFileName = \"/home/jamie1053/Documents/CodingRelated/Personal/chatgpt-molegame/frontend/src/components/RunTime.js\",\n  _s = $RefreshSig$();\n// RunTime.js\nimport React, { useState, useEffect } from 'react';\nimport Bush from './Bush';\nimport CreateBushMimic from './CreateBushMimic'; // Import CreateBushMimic\nimport DestroyBushMimic from './DestroyBushMimic'; // Import DestroyBushMimic\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RunTime = ({\n  setScore,\n  score,\n  onGameOver,\n  setPenalty\n}) => {\n  _s();\n  const bushSize = 80;\n  const initialBushesSet = 7;\n  const [bushes, setBushes] = useState([]);\n  const [moleIndex, setMoleIndex] = useState(null);\n  const [nextMoleIndex, setNextMoleIndex] = useState(null);\n  const [moleVisible, setMoleVisible] = useState(false);\n  const [molePosition, setMolePosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [destroyMimics, setDestroyMimics] = useState([]);\n  const [createMimic, setCreateMimic] = useState(null);\n  const [animationTimers, setAnimationTimers] = useState({});\n  const generateRandomPosition = () => {\n    const x = Math.random() * (screen.availWidth - 240) + 120;\n    const y = screen.availHeight / 2 + Math.random() * (screen.availHeight / 2 - 120);\n    return {\n      x,\n      y\n    };\n  };\n  const generateNonOverlappingPosition = newBushes => {\n    let newPosition;\n    let isOverlapping;\n    do {\n      isOverlapping = false;\n      newPosition = generateRandomPosition();\n      for (const bush of newBushes) {\n        if (newPosition.x < bush.x + bushSize && newPosition.x + bushSize > bush.x && newPosition.y < bush.y + bushSize && newPosition.y + bushSize > bush.y) {\n          isOverlapping = true;\n          break;\n        }\n      }\n    } while (isOverlapping);\n    return newPosition;\n  };\n  useEffect(() => {\n    const initialBushes = [];\n    while (initialBushes.length < initialBushesSet) {\n      const newPosition = generateNonOverlappingPosition(initialBushes);\n      initialBushes.push(newPosition);\n    }\n    setBushes(initialBushes);\n  }, []);\n  useEffect(() => {\n    const moleInterval = setInterval(() => {\n      setMoleVisible(true);\n      setTimeout(() => {\n        setMoleVisible(false);\n      }, 1250 - score * 25);\n    }, 2000 - score * 35);\n    return () => {\n      clearInterval(moleInterval);\n    };\n  }, [score]);\n  useEffect(() => {\n    setNextMoleIndex(Math.floor(Math.random() * bushes.length));\n    if (!moleVisible && nextMoleIndex !== null) {\n      setMoleIndex(nextMoleIndex);\n      setMolePosition({\n        ...bushes[nextMoleIndex]\n      });\n    }\n  }, [moleVisible, nextMoleIndex, bushes]);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (destroyMimics.length > 0) {\n        setDestroyMimics(prevMimics => {\n          const newMimics = [...prevMimics];\n          newMimics.forEach(mimic => {\n            const circles = document.querySelectorAll(`.fakebush${mimic.uniqueKey} .fakecircle`);\n            if (circles.length > 0) {\n              const firstCircle = circles[0];\n              firstCircle.style.transform = 'scale(0)';\n              const timerId = setTimeout(() => {\n                firstCircle.remove();\n                // Remove the timer from the animationTimers\n                setAnimationTimers(prevTimers => {\n                  const newTimers = {\n                    ...prevTimers\n                  };\n                  delete newTimers[mimic.uniqueKey];\n                  return newTimers;\n                });\n              }, 200); // Adjust the animation duration as needed\n              // Store the timer in the animationTimers\n              setAnimationTimers(prevTimers => ({\n                ...prevTimers,\n                [mimic.uniqueKey]: timerId\n              }));\n            } else {\n              // All circles in this fake bush have been removed\n              // Remove the fake bush mimic\n              newMimics.splice(newMimics.indexOf(mimic), 1);\n            }\n          });\n          return newMimics;\n        });\n      }\n    }, 50); // Adjust the interval as needed\n\n    return () => {\n      clearInterval(interval);\n      // Clear any remaining animation timers when the component unmounts\n      Object.values(animationTimers).forEach(timerId => clearTimeout(timerId));\n    };\n  }, [destroyMimics]);\n  const handleMoleClick = index => {\n    createNewBushes(index);\n    if (moleVisible && index === moleIndex) {\n      setScore(prevScore => prevScore + 1);\n      setMoleVisible(false);\n    } else if (index !== moleIndex) {\n      setPenalty(prevPenalty => prevPenalty + 1);\n    }\n  };\n  const handleBushClick = index => {\n    createNewBushes(index);\n    if (moleVisible && index === moleIndex) {\n      setScore(prevScore => prevScore + 1);\n      setMoleVisible(false);\n    } else {\n      setPenalty(prevPenalty => prevPenalty + 1);\n    }\n  };\n  const createNewBushes = indexToRemove => {\n    const newBushes = bushes.filter((_, index) => index !== indexToRemove);\n\n    // Execute DestroyBushMimic\n    const uniqueKey = Date.now(); // Unique key for the fake bush\n    let newDestroyMimic = {\n      x: bushes[indexToRemove].x,\n      y: bushes[indexToRemove].y,\n      uniqueKey: uniqueKey\n    };\n    destroyMimics.push(newDestroyMimic);\n    if (Math.random() < 0.75) {\n      const newPosition = generateNonOverlappingPosition(newBushes);\n      newBushes.push(newPosition);\n\n      // Execute CreateBushMimic\n      //setCreateMimic({ x: newPosition.x, y: newPosition.y });\n    }\n\n    if (newBushes.length <= 0) {\n      console.log(\"gameoverlmao\");\n      onGameOver();\n    }\n    setBushes(newBushes);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [destroyMimics && destroyMimics.map(mimic => /*#__PURE__*/_jsxDEV(DestroyBushMimic, {\n      x: mimic.x,\n      y: mimic.y,\n      uniqueKey: mimic.uniqueKey\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }, this)), createMimic && /*#__PURE__*/_jsxDEV(CreateBushMimic, {\n      x: createMimic.x,\n      y: createMimic.y\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Bush, {\n      bushes: bushes,\n      moleIndex: moleIndex,\n      moleVisible: moleVisible,\n      molePosition: molePosition,\n      handleMoleClick: handleMoleClick,\n      handleBushClick: handleBushClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(RunTime, \"A9UVJYtkakAs0Ip3thkRVvT9NG4=\");\n_c = RunTime;\nexport default RunTime;\nvar _c;\n$RefreshReg$(_c, \"RunTime\");","map":{"version":3,"names":["React","useState","useEffect","Bush","CreateBushMimic","DestroyBushMimic","jsxDEV","_jsxDEV","Fragment","_Fragment","RunTime","setScore","score","onGameOver","setPenalty","_s","bushSize","initialBushesSet","bushes","setBushes","moleIndex","setMoleIndex","nextMoleIndex","setNextMoleIndex","moleVisible","setMoleVisible","molePosition","setMolePosition","x","y","destroyMimics","setDestroyMimics","createMimic","setCreateMimic","animationTimers","setAnimationTimers","generateRandomPosition","Math","random","screen","availWidth","availHeight","generateNonOverlappingPosition","newBushes","newPosition","isOverlapping","bush","initialBushes","length","push","moleInterval","setInterval","setTimeout","clearInterval","floor","interval","prevMimics","newMimics","forEach","mimic","circles","document","querySelectorAll","uniqueKey","firstCircle","style","transform","timerId","remove","prevTimers","newTimers","splice","indexOf","Object","values","clearTimeout","handleMoleClick","index","createNewBushes","prevScore","prevPenalty","handleBushClick","indexToRemove","filter","_","Date","now","newDestroyMimic","console","log","children","map","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jamie1053/Documents/CodingRelated/Personal/chatgpt-molegame/frontend/src/components/RunTime.js"],"sourcesContent":["// RunTime.js\nimport React, { useState, useEffect } from 'react';\nimport Bush from './Bush';\nimport CreateBushMimic from './CreateBushMimic'; // Import CreateBushMimic\nimport DestroyBushMimic from './DestroyBushMimic'; // Import DestroyBushMimic\n\nconst RunTime = ({ setScore, score, onGameOver, setPenalty }) => {\n  const bushSize = 80;\n  const initialBushesSet = 7;\n\n  const [bushes, setBushes] = useState([]);\n  const [moleIndex, setMoleIndex] = useState(null);\n  const [nextMoleIndex, setNextMoleIndex] = useState(null);\n  const [moleVisible, setMoleVisible] = useState(false);\n  const [molePosition, setMolePosition] = useState({ x: 0, y: 0 });\n  const [destroyMimics, setDestroyMimics] = useState([]);\n  const [createMimic, setCreateMimic] = useState(null);\n  const [animationTimers, setAnimationTimers] = useState({});\n\n  const generateRandomPosition = () => {\n    const x = Math.random() * (screen.availWidth - 240) + 120;\n    const y = (screen.availHeight / 2) + (Math.random() * ((screen.availHeight / 2) - 120));\n    return { x, y };\n  };\n\n  const generateNonOverlappingPosition = (newBushes) => {\n    let newPosition;\n    let isOverlapping;\n\n    do {\n      isOverlapping = false;\n      newPosition = generateRandomPosition();\n\n      for (const bush of newBushes) {\n        if (\n          newPosition.x < bush.x + bushSize &&\n          newPosition.x + bushSize > bush.x &&\n          newPosition.y < bush.y + bushSize &&\n          newPosition.y + bushSize > bush.y\n        ) {\n          isOverlapping = true;\n          break;\n        }\n      }\n    } while (isOverlapping);\n\n    return newPosition;\n  };\n\n  useEffect(() => {\n    const initialBushes = [];\n    while (initialBushes.length < initialBushesSet) {\n      const newPosition = generateNonOverlappingPosition(initialBushes);\n      initialBushes.push(newPosition);\n    }\n\n    setBushes(initialBushes);\n  }, []);\n\n  useEffect(() => {\n    const moleInterval = setInterval(() => {\n      setMoleVisible(true);\n\n      setTimeout(() => {\n        setMoleVisible(false);\n      }, 1250 - score * 25);\n    }, 2000 - score * 35);\n\n    return () => {\n      clearInterval(moleInterval);\n    };\n  }, [score]);\n\n  useEffect(() => {\n    setNextMoleIndex(Math.floor(Math.random() * bushes.length));\n    if (!moleVisible && nextMoleIndex !== null) {\n      setMoleIndex(nextMoleIndex);\n      setMolePosition({ ...bushes[nextMoleIndex] });\n    }\n  }, [moleVisible, nextMoleIndex, bushes]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (destroyMimics.length > 0) {\n        setDestroyMimics((prevMimics) => {\n          const newMimics = [...prevMimics];\n          newMimics.forEach((mimic) => {\n            const circles = document.querySelectorAll(`.fakebush${mimic.uniqueKey} .fakecircle`);\n            if (circles.length > 0) {\n              const firstCircle = circles[0];\n              firstCircle.style.transform = 'scale(0)';\n              const timerId = setTimeout(() => {\n                firstCircle.remove();\n                // Remove the timer from the animationTimers\n                setAnimationTimers((prevTimers) => {\n                  const newTimers = { ...prevTimers };\n                  delete newTimers[mimic.uniqueKey];\n                  return newTimers;\n                });\n              }, 200); // Adjust the animation duration as needed\n              // Store the timer in the animationTimers\n              setAnimationTimers((prevTimers) => ({\n                ...prevTimers,\n                [mimic.uniqueKey]: timerId,\n              }));\n            } else {\n              // All circles in this fake bush have been removed\n              // Remove the fake bush mimic\n              newMimics.splice(newMimics.indexOf(mimic), 1);\n            }\n          });\n          return newMimics;\n        });\n      }\n    }, 50); // Adjust the interval as needed\n\n    return () => {\n      clearInterval(interval);\n      // Clear any remaining animation timers when the component unmounts\n      Object.values(animationTimers).forEach((timerId) => clearTimeout(timerId));\n    };\n  }, [destroyMimics]);\n  \n  \n  \n  \n  const handleMoleClick = (index) => {\n    createNewBushes(index);\n    if (moleVisible && index === moleIndex) {\n      setScore((prevScore) => prevScore + 1);\n      setMoleVisible(false);\n    } else if (index !== moleIndex) {\n      setPenalty((prevPenalty) => prevPenalty + 1);\n    }\n  };\n\n  const handleBushClick = (index) => {\n    createNewBushes(index);\n    if(moleVisible && index === moleIndex){\n      setScore((prevScore) => prevScore + 1);\n      setMoleVisible(false);\n    }else{\n      setPenalty((prevPenalty) => prevPenalty + 1);\n    }\n  };\n\n  const createNewBushes = (indexToRemove) => {\n    const newBushes = bushes.filter((_, index) => index !== indexToRemove);\n\n    // Execute DestroyBushMimic\n    const uniqueKey = Date.now(); // Unique key for the fake bush\n    let newDestroyMimic = ({x: bushes[indexToRemove].x, y: bushes[indexToRemove].y, uniqueKey: uniqueKey});\n    destroyMimics.push(newDestroyMimic);\n    if (Math.random() < 0.75) {\n      const newPosition = generateNonOverlappingPosition(newBushes);\n      newBushes.push(newPosition);\n\n      // Execute CreateBushMimic\n      //setCreateMimic({ x: newPosition.x, y: newPosition.y });\n    }\n\n    if (newBushes.length <= 0) {\n      console.log(\"gameoverlmao\");\n      onGameOver();\n    }\n\n    setBushes(newBushes);\n  };\n\n  return (\n    <>\n\n      {/* Render the DestroyBushMimic and CreateBushMimic components */}\n      {destroyMimics && destroyMimics.map((mimic) => (\n        <DestroyBushMimic x={mimic.x} y={mimic.y} uniqueKey={mimic.uniqueKey} />\n      ))}\n      {createMimic && (\n        <CreateBushMimic x={createMimic.x} y={createMimic.y} />\n      )}\n\n      {/* Render the Bush component */}\n      <Bush\n        bushes={bushes}\n        moleIndex={moleIndex}\n        moleVisible={moleVisible}\n        molePosition={molePosition}\n        handleMoleClick={handleMoleClick}\n        handleBushClick={handleBushClick}\n      />\n    </>\n  );\n};\n\nexport default RunTime;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}