{"ast":null,"code":"var _jsxFileName = \"/home/jamie1053/Documents/CodingRelated/Personal/chatgpt-molegame/frontend/src/components/RunTime.js\",\n  _s = $RefreshSig$();\n// RunTime.js\nimport React, { useState, useEffect } from 'react';\nimport Bush from './Bush';\nimport CreateBushMimic from './CreateBushMimic'; // Import CreateBushMimic\nimport DestroyBushMimic from './DestroyBushMimic'; // Import DestroyBushMimic\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RunTime = ({\n  setScore,\n  score,\n  onGameOver,\n  setPenalty\n}) => {\n  _s();\n  const bushSize = 80;\n  const initialBushesSet = 7;\n  const [bushes, setBushes] = useState([]);\n  const [moleIndex, setMoleIndex] = useState(null);\n  const [nextMoleIndex, setNextMoleIndex] = useState(null);\n  const [moleVisible, setMoleVisible] = useState(false);\n  const [molePosition, setMolePosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [destroyMimics, setDestroyMimics] = useState([]);\n  const [destroyMimic, setDestroyMimic] = useState([]);\n  const [createMimic, setCreateMimic] = useState(null);\n  const generateRandomPosition = () => {\n    const x = Math.random() * (screen.availWidth - 240) + 120;\n    const y = screen.availHeight / 2 + Math.random() * (screen.availHeight / 2 - 120);\n    return {\n      x,\n      y\n    };\n  };\n  const generateNonOverlappingPosition = newBushes => {\n    let newPosition;\n    let isOverlapping;\n    do {\n      isOverlapping = false;\n      newPosition = generateRandomPosition();\n      for (const bush of newBushes) {\n        if (newPosition.x < bush.x + bushSize && newPosition.x + bushSize > bush.x && newPosition.y < bush.y + bushSize && newPosition.y + bushSize > bush.y) {\n          isOverlapping = true;\n          break;\n        }\n      }\n    } while (isOverlapping);\n    return newPosition;\n  };\n  useEffect(() => {\n    const initialBushes = [];\n    while (initialBushes.length < initialBushesSet) {\n      const newPosition = generateNonOverlappingPosition(initialBushes);\n      initialBushes.push(newPosition);\n    }\n    setBushes(initialBushes);\n  }, []);\n  useEffect(() => {\n    const moleInterval = setInterval(() => {\n      setMoleVisible(true);\n      setTimeout(() => {\n        setMoleVisible(false);\n      }, 1250 - score * 25);\n    }, 2000 - score * 35);\n    return () => {\n      clearInterval(moleInterval);\n    };\n  }, [score]);\n  useEffect(() => {\n    setNextMoleIndex(Math.floor(Math.random() * bushes.length));\n    if (!moleVisible && nextMoleIndex !== null) {\n      setMoleIndex(nextMoleIndex);\n      setMolePosition({\n        ...bushes[nextMoleIndex]\n      });\n    }\n  }, [moleVisible, nextMoleIndex, bushes]);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (destroyMimics.length > 0) {\n        const newDestroyMimics = [...destroyMimics];\n        newDestroyMimics.forEach((mimic, index) => {\n          const circles = document.querySelectorAll(`.fakebush${mimic.uniqueKey} .fakecircle`);\n          if (circles.length > 0) {\n            const firstCircle = circles[0];\n            firstCircle.style.transform = 'scale(0)';\n            setTimeout(() => {\n              firstCircle.remove(); // Remove the circle element after the animation\n            }, 200); // Adjust the animation duration as needed\n          } else {\n            // All circles in this fake bush have been removed\n            // Remove the fake bush mimic\n            newDestroyMimics.splice(index, 1);\n          }\n        });\n        setDestroyMimics(newDestroyMimics);\n      }\n    }, 50); // Adjust the interval as needed\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [destroyMimics]);\n  const handleMoleClick = index => {\n    createNewBushes(index);\n    if (moleVisible && index === moleIndex) {\n      setScore(prevScore => prevScore + 1);\n      setMoleVisible(false);\n    } else if (index !== moleIndex) {\n      setPenalty(prevPenalty => prevPenalty + 1);\n    }\n  };\n  const handleBushClick = index => {\n    createNewBushes(index);\n    if (moleVisible && index === moleIndex) {\n      setScore(prevScore => prevScore + 1);\n      setMoleVisible(false);\n    } else {\n      setPenalty(prevPenalty => prevPenalty + 1);\n    }\n  };\n  const createNewBushes = indexToRemove => {\n    const newBushes = bushes.filter((_, index) => index !== indexToRemove);\n\n    // Execute DestroyBushMimic\n    const uniqueKey = Date.now(); // Unique key for the fake bush\n    setDestroyMimic({\n      x: bushes[indexToRemove].x,\n      y: bushes[indexToRemove].y,\n      uniqueKey: uniqueKey\n    });\n    setDestroyMimics([...destroyMimics], destroyMimic);\n    if (Math.random() < 0.75) {\n      const newPosition = generateNonOverlappingPosition(newBushes);\n      newBushes.push(newPosition);\n\n      // Execute CreateBushMimic\n      //setCreateMimic({ x: newPosition.x, y: newPosition.y });\n    }\n\n    if (newBushes.length <= 0) {\n      console.log(\"gameoverlmao\");\n      onGameOver();\n    }\n    setBushes(newBushes);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [destroyMimics.map(mimic => /*#__PURE__*/_jsxDEV(DestroyBushMimic, {\n      x: destroyMimic.x,\n      y: destroyMimic.y,\n      uniqueKey: destroyMimic.uniqueKey\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }, this)), createMimic && /*#__PURE__*/_jsxDEV(CreateBushMimic, {\n      x: createMimic.x,\n      y: createMimic.y\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Bush, {\n      bushes: bushes,\n      moleIndex: moleIndex,\n      moleVisible: moleVisible,\n      molePosition: molePosition,\n      handleMoleClick: handleMoleClick,\n      handleBushClick: handleBushClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(RunTime, \"TE4RiV9JUG+femDOKcTKx9Kssmg=\");\n_c = RunTime;\nexport default RunTime;\nvar _c;\n$RefreshReg$(_c, \"RunTime\");","map":{"version":3,"names":["React","useState","useEffect","Bush","CreateBushMimic","DestroyBushMimic","jsxDEV","_jsxDEV","Fragment","_Fragment","RunTime","setScore","score","onGameOver","setPenalty","_s","bushSize","initialBushesSet","bushes","setBushes","moleIndex","setMoleIndex","nextMoleIndex","setNextMoleIndex","moleVisible","setMoleVisible","molePosition","setMolePosition","x","y","destroyMimics","setDestroyMimics","destroyMimic","setDestroyMimic","createMimic","setCreateMimic","generateRandomPosition","Math","random","screen","availWidth","availHeight","generateNonOverlappingPosition","newBushes","newPosition","isOverlapping","bush","initialBushes","length","push","moleInterval","setInterval","setTimeout","clearInterval","floor","interval","newDestroyMimics","forEach","mimic","index","circles","document","querySelectorAll","uniqueKey","firstCircle","style","transform","remove","splice","handleMoleClick","createNewBushes","prevScore","prevPenalty","handleBushClick","indexToRemove","filter","_","Date","now","console","log","children","map","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jamie1053/Documents/CodingRelated/Personal/chatgpt-molegame/frontend/src/components/RunTime.js"],"sourcesContent":["// RunTime.js\nimport React, { useState, useEffect } from 'react';\nimport Bush from './Bush';\nimport CreateBushMimic from './CreateBushMimic'; // Import CreateBushMimic\nimport DestroyBushMimic from './DestroyBushMimic'; // Import DestroyBushMimic\n\nconst RunTime = ({ setScore, score, onGameOver, setPenalty }) => {\n  const bushSize = 80;\n  const initialBushesSet = 7;\n\n  const [bushes, setBushes] = useState([]);\n  const [moleIndex, setMoleIndex] = useState(null);\n  const [nextMoleIndex, setNextMoleIndex] = useState(null);\n  const [moleVisible, setMoleVisible] = useState(false);\n  const [molePosition, setMolePosition] = useState({ x: 0, y: 0 });\n  const [destroyMimics, setDestroyMimics] = useState([]);\n  const [destroyMimic, setDestroyMimic] = useState([]);\n  const [createMimic, setCreateMimic] = useState(null);\n\n  const generateRandomPosition = () => {\n    const x = Math.random() * (screen.availWidth - 240) + 120;\n    const y = (screen.availHeight / 2) + (Math.random() * ((screen.availHeight / 2) - 120));\n    return { x, y };\n  };\n\n  const generateNonOverlappingPosition = (newBushes) => {\n    let newPosition;\n    let isOverlapping;\n\n    do {\n      isOverlapping = false;\n      newPosition = generateRandomPosition();\n\n      for (const bush of newBushes) {\n        if (\n          newPosition.x < bush.x + bushSize &&\n          newPosition.x + bushSize > bush.x &&\n          newPosition.y < bush.y + bushSize &&\n          newPosition.y + bushSize > bush.y\n        ) {\n          isOverlapping = true;\n          break;\n        }\n      }\n    } while (isOverlapping);\n\n    return newPosition;\n  };\n\n  useEffect(() => {\n    const initialBushes = [];\n    while (initialBushes.length < initialBushesSet) {\n      const newPosition = generateNonOverlappingPosition(initialBushes);\n      initialBushes.push(newPosition);\n    }\n\n    setBushes(initialBushes);\n  }, []);\n\n  useEffect(() => {\n    const moleInterval = setInterval(() => {\n      setMoleVisible(true);\n\n      setTimeout(() => {\n        setMoleVisible(false);\n      }, 1250 - score * 25);\n    }, 2000 - score * 35);\n\n    return () => {\n      clearInterval(moleInterval);\n    };\n  }, [score]);\n\n  useEffect(() => {\n    setNextMoleIndex(Math.floor(Math.random() * bushes.length));\n    if (!moleVisible && nextMoleIndex !== null) {\n      setMoleIndex(nextMoleIndex);\n      setMolePosition({ ...bushes[nextMoleIndex] });\n    }\n  }, [moleVisible, nextMoleIndex, bushes]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (destroyMimics.length > 0) {\n        const newDestroyMimics = [...destroyMimics];\n\n        newDestroyMimics.forEach((mimic, index) => {\n          const circles = document.querySelectorAll(`.fakebush${mimic.uniqueKey} .fakecircle`);\n          if (circles.length > 0) {\n            const firstCircle = circles[0];\n            firstCircle.style.transform = 'scale(0)';\n            setTimeout(() => {\n              firstCircle.remove(); // Remove the circle element after the animation\n            }, 200); // Adjust the animation duration as needed\n          } else {\n            // All circles in this fake bush have been removed\n            // Remove the fake bush mimic\n            newDestroyMimics.splice(index, 1);\n          }\n        });\n\n        setDestroyMimics(newDestroyMimics);\n      }\n    }, 50); // Adjust the interval as needed\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [destroyMimics]);\n  \n  const handleMoleClick = (index) => {\n    createNewBushes(index);\n    if (moleVisible && index === moleIndex) {\n      setScore((prevScore) => prevScore + 1);\n      setMoleVisible(false);\n    } else if (index !== moleIndex) {\n      setPenalty((prevPenalty) => prevPenalty + 1);\n    }\n  };\n\n  const handleBushClick = (index) => {\n    createNewBushes(index);\n    if(moleVisible && index === moleIndex){\n      setScore((prevScore) => prevScore + 1);\n      setMoleVisible(false);\n    }else{\n      setPenalty((prevPenalty) => prevPenalty + 1);\n    }\n  };\n\n  const createNewBushes = (indexToRemove) => {\n    const newBushes = bushes.filter((_, index) => index !== indexToRemove);\n\n    // Execute DestroyBushMimic\n    const uniqueKey = Date.now(); // Unique key for the fake bush\n    setDestroyMimic({x: bushes[indexToRemove].x, y: bushes[indexToRemove].y, uniqueKey: uniqueKey});\n    setDestroyMimics([...destroyMimics], destroyMimic);\n    if (Math.random() < 0.75) {\n      const newPosition = generateNonOverlappingPosition(newBushes);\n      newBushes.push(newPosition);\n\n      // Execute CreateBushMimic\n      //setCreateMimic({ x: newPosition.x, y: newPosition.y });\n    }\n\n    if (newBushes.length <= 0) {\n      console.log(\"gameoverlmao\");\n      onGameOver();\n    }\n\n    setBushes(newBushes);\n  };\n\n  return (\n    <>\n\n      {/* Render the DestroyBushMimic and CreateBushMimic components */}\n      {destroyMimics.map((mimic) => (\n        <DestroyBushMimic\n          x={destroyMimic.x}\n          y={destroyMimic.y}\n          uniqueKey={destroyMimic.uniqueKey}\n        />\n      ))}\n      {createMimic && (\n        <CreateBushMimic x={createMimic.x} y={createMimic.y} />\n      )}\n\n      {/* Render the Bush component */}\n      <Bush\n        bushes={bushes}\n        moleIndex={moleIndex}\n        moleVisible={moleVisible}\n        molePosition={molePosition}\n        handleMoleClick={handleMoleClick}\n        handleBushClick={handleBushClick}\n      />\n    </>\n  );\n};\n\nexport default RunTime;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}