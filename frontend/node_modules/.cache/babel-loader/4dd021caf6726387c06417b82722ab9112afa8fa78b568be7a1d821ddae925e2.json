{"ast":null,"code":"var _jsxFileName = \"/home/jamie1053/Documents/CodingRelated/Personal/chatgpt-molegame/frontend/src/components/RunTime.js\",\n  _s = $RefreshSig$();\n// RunTime.js\nimport React, { useState, useEffect } from 'react';\nimport Bush from './Bush';\nimport CreateBushMimic from './CreateBushMimic'; // Import CreateBushMimic\nimport DestroyBushMimic from './DestroyBushMimic'; // Import DestroyBushMimic\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RunTime = ({\n  setScore,\n  score,\n  onGameOver,\n  setPenalty,\n  initialBushes,\n  difficultyMultiplier,\n  regeneratingBushes\n}) => {\n  _s();\n  const bushSize = 80;\n  const initialBushesSet = initialBushes;\n  const [bushes, setBushes] = useState([]);\n  const [moleIndex, setMoleIndex] = useState(null);\n  const [nextMoleIndex, setNextMoleIndex] = useState(null);\n  const [moleVisible, setMoleVisible] = useState(false);\n  const [molePosition, setMolePosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [destroyMimics, setDestroyMimics] = useState([]);\n  const [createMimic, setCreateMimic] = useState(null);\n  const generateRandomPosition = () => {\n    const x = Math.random() * (screen.availWidth - 240) + 120;\n    const y = screen.availHeight / 2 + Math.random() * (screen.availHeight / 2 - 120);\n    return {\n      x,\n      y\n    };\n  };\n  const generateNonOverlappingPosition = newBushes => {\n    let newPosition;\n    let isOverlapping;\n    do {\n      isOverlapping = false;\n      newPosition = generateRandomPosition();\n      for (const bush of newBushes) {\n        if (newPosition.x < bush.x + bushSize && newPosition.x + bushSize > bush.x && newPosition.y < bush.y + bushSize && newPosition.y + bushSize > bush.y) {\n          isOverlapping = true;\n          break;\n        }\n      }\n    } while (isOverlapping);\n    return newPosition;\n  };\n  useEffect(() => {\n    const initialBushes = [];\n    while (initialBushes.length < initialBushesSet) {\n      const newPosition = generateNonOverlappingPosition(initialBushes);\n      initialBushes.push(newPosition);\n    }\n    setBushes(initialBushes);\n  }, []);\n  useEffect(() => {\n    const moleInterval = setInterval(() => {\n      setMoleVisible(true);\n      setTimeout(() => {\n        setMoleVisible(false);\n      }, 1250 - score * 25 * difficultyMultiplier);\n    }, 2000 - score * 35 * difficultyMultiplier);\n    return () => {\n      clearInterval(moleInterval);\n    };\n  }, [score]);\n  useEffect(() => {\n    setNextMoleIndex(Math.floor(Math.random() * bushes.length));\n    if (!moleVisible && nextMoleIndex !== null) {\n      setMoleIndex(nextMoleIndex);\n      setMolePosition({\n        ...bushes[nextMoleIndex]\n      });\n    }\n  }, [moleVisible, nextMoleIndex, bushes]);\n  useEffect(() => {\n    const animationDuration = 200; // Adjust the animation duration as needed\n\n    const animateDestroyMimic = mimic => {\n      const circles = document.querySelectorAll(`.fakebush${mimic.uniqueKey} .fakecircle`);\n      if (circles.length > 0) {\n        const firstCircle = circles[0];\n        firstCircle.style.transform = 'scale(0)';\n        setTimeout(() => {\n          firstCircle.remove();\n          if (circles.length > 1) {\n            // If there are more circles, keep the animation going\n            requestAnimationFrame(() => animateDestroyMimic(mimic));\n          }\n        }, animationDuration);\n      }\n    };\n    const interval = setInterval(() => {\n      if (destroyMimics.length > 0) {\n        // Start animations for each destroy mimic\n        destroyMimics.forEach(mimic => {\n          animateDestroyMimic(mimic);\n        });\n      }\n    }, 50); // Adjust the interval as needed\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [destroyMimics]);\n  const handleMoleClick = index => {\n    createNewBushes(index);\n    if (moleVisible && index === moleIndex) {\n      setScore(prevScore => prevScore + 1);\n      setMoleVisible(false);\n    } else if (index !== moleIndex) {\n      setPenalty(prevPenalty => prevPenalty + 1);\n    }\n  };\n  const handleBushClick = index => {\n    createNewBushes(index);\n    if (moleVisible && index === moleIndex) {\n      setScore(prevScore => prevScore + 1);\n      setMoleVisible(false);\n    } else {\n      setPenalty(prevPenalty => prevPenalty + 1);\n    }\n  };\n  const createNewBushes = indexToRemove => {\n    const newBushes = bushes.filter((_, index) => index !== indexToRemove);\n\n    // Execute DestroyBushMimic\n    const uniqueKey = Date.now(); // Unique key for the fake bush\n    let newDestroyMimic = {\n      x: bushes[indexToRemove].x,\n      y: bushes[indexToRemove].y,\n      uniqueKey: uniqueKey\n    };\n    destroyMimics.push(newDestroyMimic);\n    if (Math.random() < 0.75) {\n      const newPosition = generateNonOverlappingPosition(newBushes);\n      newBushes.push(newPosition);\n\n      // Execute CreateBushMimic\n      //setCreateMimic({ x: newPosition.x, y: newPosition.y });\n    }\n\n    if (newBushes.length <= 0) {\n      console.log(\"gameoverlmao\");\n      onGameOver();\n    }\n    setBushes(newBushes);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [destroyMimics && destroyMimics.map(mimic => /*#__PURE__*/_jsxDEV(DestroyBushMimic, {\n      x: mimic.x,\n      y: mimic.y,\n      uniqueKey: mimic.uniqueKey\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }, this)), createMimic && /*#__PURE__*/_jsxDEV(CreateBushMimic, {\n      x: createMimic.x,\n      y: createMimic.y\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Bush, {\n      bushes: bushes,\n      moleIndex: moleIndex,\n      moleVisible: moleVisible,\n      molePosition: molePosition,\n      handleMoleClick: handleMoleClick,\n      handleBushClick: handleBushClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(RunTime, \"svxNfWVyiyajhR2n3yyPazVPxLY=\");\n_c = RunTime;\nexport default RunTime;\nvar _c;\n$RefreshReg$(_c, \"RunTime\");","map":{"version":3,"names":["React","useState","useEffect","Bush","CreateBushMimic","DestroyBushMimic","jsxDEV","_jsxDEV","Fragment","_Fragment","RunTime","setScore","score","onGameOver","setPenalty","initialBushes","difficultyMultiplier","regeneratingBushes","_s","bushSize","initialBushesSet","bushes","setBushes","moleIndex","setMoleIndex","nextMoleIndex","setNextMoleIndex","moleVisible","setMoleVisible","molePosition","setMolePosition","x","y","destroyMimics","setDestroyMimics","createMimic","setCreateMimic","generateRandomPosition","Math","random","screen","availWidth","availHeight","generateNonOverlappingPosition","newBushes","newPosition","isOverlapping","bush","length","push","moleInterval","setInterval","setTimeout","clearInterval","floor","animationDuration","animateDestroyMimic","mimic","circles","document","querySelectorAll","uniqueKey","firstCircle","style","transform","remove","requestAnimationFrame","interval","forEach","handleMoleClick","index","createNewBushes","prevScore","prevPenalty","handleBushClick","indexToRemove","filter","_","Date","now","newDestroyMimic","console","log","children","map","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jamie1053/Documents/CodingRelated/Personal/chatgpt-molegame/frontend/src/components/RunTime.js"],"sourcesContent":["// RunTime.js\nimport React, { useState, useEffect } from 'react';\nimport Bush from './Bush';\nimport CreateBushMimic from './CreateBushMimic'; // Import CreateBushMimic\nimport DestroyBushMimic from './DestroyBushMimic'; // Import DestroyBushMimic\n\nconst RunTime = ({ setScore, score, onGameOver, setPenalty, initialBushes, difficultyMultiplier, regeneratingBushes}) => {\n  const bushSize = 80;\n  const initialBushesSet = initialBushes;\n\n  const [bushes, setBushes] = useState([]);\n  const [moleIndex, setMoleIndex] = useState(null);\n  const [nextMoleIndex, setNextMoleIndex] = useState(null);\n  const [moleVisible, setMoleVisible] = useState(false);\n  const [molePosition, setMolePosition] = useState({ x: 0, y: 0 });\n  const [destroyMimics, setDestroyMimics] = useState([]);\n  const [createMimic, setCreateMimic] = useState(null);\n\n  const generateRandomPosition = () => {\n    const x = Math.random() * (screen.availWidth - 240) + 120;\n    const y = (screen.availHeight / 2) + (Math.random() * ((screen.availHeight / 2) - 120));\n    return { x, y };\n  };\n\n  const generateNonOverlappingPosition = (newBushes) => {\n    let newPosition;\n    let isOverlapping;\n\n    do {\n      isOverlapping = false;\n      newPosition = generateRandomPosition();\n\n      for (const bush of newBushes) {\n        if (\n          newPosition.x < bush.x + bushSize &&\n          newPosition.x + bushSize > bush.x &&\n          newPosition.y < bush.y + bushSize &&\n          newPosition.y + bushSize > bush.y\n        ) {\n          isOverlapping = true;\n          break;\n        }\n      }\n    } while (isOverlapping);\n\n    return newPosition;\n  };\n\n  useEffect(() => {\n    const initialBushes = [];\n    while (initialBushes.length < initialBushesSet) {\n      const newPosition = generateNonOverlappingPosition(initialBushes);\n      initialBushes.push(newPosition);\n    }\n\n    setBushes(initialBushes);\n  }, []);\n\n  useEffect(() => {\n    const moleInterval = setInterval(() => {\n      setMoleVisible(true);\n\n      setTimeout(() => {\n        setMoleVisible(false);\n      }, 1250 - (score * 25) * difficultyMultiplier);\n    }, 2000 - (score * 35) * difficultyMultiplier);\n\n    return () => {\n      clearInterval(moleInterval);\n    };\n  }, [score]);\n\n  useEffect(() => {\n    setNextMoleIndex(Math.floor(Math.random() * bushes.length));\n    if (!moleVisible && nextMoleIndex !== null) {\n      setMoleIndex(nextMoleIndex);\n      setMolePosition({ ...bushes[nextMoleIndex] });\n    }\n  }, [moleVisible, nextMoleIndex, bushes]);\n\n  useEffect(() => {\n    const animationDuration = 200; // Adjust the animation duration as needed\n\n    const animateDestroyMimic = (mimic) => {\n      const circles = document.querySelectorAll(`.fakebush${mimic.uniqueKey} .fakecircle`);\n      if (circles.length > 0) {\n        const firstCircle = circles[0];\n        firstCircle.style.transform = 'scale(0)';\n        setTimeout(() => {\n          firstCircle.remove();\n          if (circles.length > 1) {\n            // If there are more circles, keep the animation going\n            requestAnimationFrame(() => animateDestroyMimic(mimic));\n          }\n        }, animationDuration);\n      }\n    };\n\n    const interval = setInterval(() => {\n      if (destroyMimics.length > 0) {\n        // Start animations for each destroy mimic\n        destroyMimics.forEach((mimic) => {\n          animateDestroyMimic(mimic);\n        });\n      }\n    }, 50); // Adjust the interval as needed\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [destroyMimics]);\n  \n  \n  \n  \n  const handleMoleClick = (index) => {\n    createNewBushes(index);\n    if (moleVisible && index === moleIndex) {\n      setScore((prevScore) => prevScore + 1);\n      setMoleVisible(false);\n    } else if (index !== moleIndex) {\n      setPenalty((prevPenalty) => prevPenalty + 1);\n    }\n  };\n\n  const handleBushClick = (index) => {\n    createNewBushes(index);\n    if(moleVisible && index === moleIndex){\n      setScore((prevScore) => prevScore + 1);\n      setMoleVisible(false);\n    }else{\n      setPenalty((prevPenalty) => prevPenalty + 1);\n    }\n  };\n\n  const createNewBushes = (indexToRemove) => {\n    const newBushes = bushes.filter((_, index) => index !== indexToRemove);\n\n    // Execute DestroyBushMimic\n    const uniqueKey = Date.now(); // Unique key for the fake bush\n    let newDestroyMimic = ({x: bushes[indexToRemove].x, y: bushes[indexToRemove].y, uniqueKey: uniqueKey});\n    destroyMimics.push(newDestroyMimic);\n    if (Math.random() < 0.75) {\n      const newPosition = generateNonOverlappingPosition(newBushes);\n      newBushes.push(newPosition);\n\n      // Execute CreateBushMimic\n      //setCreateMimic({ x: newPosition.x, y: newPosition.y });\n    }\n\n    if (newBushes.length <= 0) {\n      console.log(\"gameoverlmao\");\n      onGameOver();\n    }\n\n    setBushes(newBushes);\n  };\n\n  return (\n    <>\n\n      {/* Render the DestroyBushMimic and CreateBushMimic components */}\n      {destroyMimics && destroyMimics.map((mimic) => (\n        <DestroyBushMimic x={mimic.x} y={mimic.y} uniqueKey={mimic.uniqueKey} />\n      ))}\n      {createMimic && (\n        <CreateBushMimic x={createMimic.x} y={createMimic.y} />\n      )}\n\n      {/* Render the Bush component */}\n      <Bush\n        bushes={bushes}\n        moleIndex={moleIndex}\n        moleVisible={moleVisible}\n        molePosition={molePosition}\n        handleMoleClick={handleMoleClick}\n        handleBushClick={handleBushClick}\n      />\n    </>\n  );\n};\n\nexport default RunTime;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}