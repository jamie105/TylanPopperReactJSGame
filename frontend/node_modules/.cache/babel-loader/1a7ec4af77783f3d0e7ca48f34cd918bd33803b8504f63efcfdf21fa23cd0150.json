{"ast":null,"code":"var _jsxFileName = \"/home/jamie1053/Documents/CodingRelated/Personal/chatgpt-molegame/frontend/src/components/RunTime.js\",\n  _s = $RefreshSig$();\n// RunTime.js\nimport React, { useState, useEffect } from 'react';\nimport Bush from './Bush';\nimport CreateBushMimic from './CreateBushMimic'; // Import CreateBushMimic\nimport DestroyBushMimic from './DestroyBushMimic'; // Import DestroyBushMimic\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RunTime = ({\n  setScore,\n  score,\n  onGameOver,\n  setPenalty\n}) => {\n  _s();\n  const bushSize = 80;\n  const initialBushesSet = 7;\n  const [bushes, setBushes] = useState([]);\n  const [moleIndex, setMoleIndex] = useState(null);\n  const [nextMoleIndex, setNextMoleIndex] = useState(null);\n  const [moleVisible, setMoleVisible] = useState(false);\n  const [molePosition, setMolePosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [destroyMimics, setDestroyMimics] = useState([]);\n  const [createMimic, setCreateMimic] = useState(null);\n  const maxSimultaneousAnimations = 5;\n  const generateRandomPosition = () => {\n    const x = Math.random() * (screen.availWidth - 240) + 120;\n    const y = screen.availHeight / 2 + Math.random() * (screen.availHeight / 2 - 120);\n    return {\n      x,\n      y\n    };\n  };\n  const generateNonOverlappingPosition = newBushes => {\n    let newPosition;\n    let isOverlapping;\n    do {\n      isOverlapping = false;\n      newPosition = generateRandomPosition();\n      for (const bush of newBushes) {\n        if (newPosition.x < bush.x + bushSize && newPosition.x + bushSize > bush.x && newPosition.y < bush.y + bushSize && newPosition.y + bushSize > bush.y) {\n          isOverlapping = true;\n          break;\n        }\n      }\n    } while (isOverlapping);\n    return newPosition;\n  };\n  useEffect(() => {\n    const initialBushes = [];\n    while (initialBushes.length < initialBushesSet) {\n      const newPosition = generateNonOverlappingPosition(initialBushes);\n      initialBushes.push(newPosition);\n    }\n    setBushes(initialBushes);\n  }, []);\n  useEffect(() => {\n    const moleInterval = setInterval(() => {\n      setMoleVisible(true);\n      setTimeout(() => {\n        setMoleVisible(false);\n      }, 1250 - score * 25);\n    }, 2000 - score * 35);\n    return () => {\n      clearInterval(moleInterval);\n    };\n  }, [score]);\n  useEffect(() => {\n    const animationDuration = 200; // Adjust the animation duration as needed\n\n    const animateDestroyMimics = () => {\n      setDestroyMimics(prevMimics => {\n        const updatedMimics = [...prevMimics];\n        for (let i = 0; i < maxSimultaneousAnimations; i++) {\n          if (updatedMimics.length === 0) break; // No more mimics to animate\n\n          const mimic = updatedMimics.pop();\n          const circles = document.querySelectorAll(`.fakebush${mimic.uniqueKey} .fakecircle`);\n          if (circles.length > 0) {\n            const firstCircle = circles[0];\n            firstCircle.style.transform = 'scale(0)';\n            setTimeout(() => {\n              firstCircle.remove();\n              if (circles.length > 1) {\n                // If there are more circles, keep the animation going\n                requestAnimationFrame(animateDestroyMimics);\n              }\n            }, animationDuration);\n          }\n        }\n        return updatedMimics;\n      });\n    };\n    const interval = setInterval(() => {\n      if (destroyMimics.length > 0) {\n        // Start animations for each destroy mimic\n        for (let i = 0; i < maxSimultaneousAnimations; i++) {\n          requestAnimationFrame(animateDestroyMimics);\n        }\n      }\n    }, 50); // Adjust the interval as needed\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [destroyMimics]);\n  const handleMoleClick = index => {\n    createNewBushes(index);\n    if (moleVisible && index === moleIndex) {\n      setScore(prevScore => prevScore + 1);\n      setMoleVisible(false);\n    } else if (index !== moleIndex) {\n      setPenalty(prevPenalty => prevPenalty + 1);\n    }\n  };\n  const handleBushClick = index => {\n    createNewBushes(index);\n    if (moleVisible && index === moleIndex) {\n      setScore(prevScore => prevScore + 1);\n      setMoleVisible(false);\n    } else {\n      setPenalty(prevPenalty => prevPenalty + 1);\n    }\n  };\n  const createNewBushes = indexToRemove => {\n    const newBushes = bushes.filter((_, index) => index !== indexToRemove);\n\n    // Execute DestroyBushMimic\n    const uniqueKey = Date.now(); // Unique key for the fake bush\n    let newDestroyMimic = {\n      x: bushes[indexToRemove].x,\n      y: bushes[indexToRemove].y,\n      uniqueKey: uniqueKey\n    };\n    destroyMimics.push(newDestroyMimic);\n    if (Math.random() < 0.75) {\n      const newPosition = generateNonOverlappingPosition(newBushes);\n      newBushes.push(newPosition);\n\n      // Execute CreateBushMimic\n      //setCreateMimic({ x: newPosition.x, y: newPosition.y });\n    }\n\n    if (newBushes.length <= 0) {\n      console.log(\"gameoverlmao\");\n      onGameOver();\n    }\n    setBushes(newBushes);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [destroyMimics && destroyMimics.map(mimic => /*#__PURE__*/_jsxDEV(DestroyBushMimic, {\n      x: mimic.x,\n      y: mimic.y,\n      uniqueKey: mimic.uniqueKey\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }, this)), createMimic && /*#__PURE__*/_jsxDEV(CreateBushMimic, {\n      x: createMimic.x,\n      y: createMimic.y\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Bush, {\n      bushes: bushes,\n      moleIndex: moleIndex,\n      moleVisible: moleVisible,\n      molePosition: molePosition,\n      handleMoleClick: handleMoleClick,\n      handleBushClick: handleBushClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(RunTime, \"Z1GtSoTurQNPYq6/OqENu21MhDg=\");\n_c = RunTime;\nexport default RunTime;\nvar _c;\n$RefreshReg$(_c, \"RunTime\");","map":{"version":3,"names":["React","useState","useEffect","Bush","CreateBushMimic","DestroyBushMimic","jsxDEV","_jsxDEV","Fragment","_Fragment","RunTime","setScore","score","onGameOver","setPenalty","_s","bushSize","initialBushesSet","bushes","setBushes","moleIndex","setMoleIndex","nextMoleIndex","setNextMoleIndex","moleVisible","setMoleVisible","molePosition","setMolePosition","x","y","destroyMimics","setDestroyMimics","createMimic","setCreateMimic","maxSimultaneousAnimations","generateRandomPosition","Math","random","screen","availWidth","availHeight","generateNonOverlappingPosition","newBushes","newPosition","isOverlapping","bush","initialBushes","length","push","moleInterval","setInterval","setTimeout","clearInterval","animationDuration","animateDestroyMimics","prevMimics","updatedMimics","i","mimic","pop","circles","document","querySelectorAll","uniqueKey","firstCircle","style","transform","remove","requestAnimationFrame","interval","handleMoleClick","index","createNewBushes","prevScore","prevPenalty","handleBushClick","indexToRemove","filter","_","Date","now","newDestroyMimic","console","log","children","map","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jamie1053/Documents/CodingRelated/Personal/chatgpt-molegame/frontend/src/components/RunTime.js"],"sourcesContent":["// RunTime.js\nimport React, { useState, useEffect } from 'react';\nimport Bush from './Bush';\nimport CreateBushMimic from './CreateBushMimic'; // Import CreateBushMimic\nimport DestroyBushMimic from './DestroyBushMimic'; // Import DestroyBushMimic\n\nconst RunTime = ({ setScore, score, onGameOver, setPenalty }) => {\n  const bushSize = 80;\n  const initialBushesSet = 7;\n\n  const [bushes, setBushes] = useState([]);\n  const [moleIndex, setMoleIndex] = useState(null);\n  const [nextMoleIndex, setNextMoleIndex] = useState(null);\n  const [moleVisible, setMoleVisible] = useState(false);\n  const [molePosition, setMolePosition] = useState({ x: 0, y: 0 });\n  const [destroyMimics, setDestroyMimics] = useState([]);\n  const [createMimic, setCreateMimic] = useState(null);\n  const maxSimultaneousAnimations = 5;\n\n  const generateRandomPosition = () => {\n    const x = Math.random() * (screen.availWidth - 240) + 120;\n    const y = (screen.availHeight / 2) + (Math.random() * ((screen.availHeight / 2) - 120));\n    return { x, y };\n  };\n\n  const generateNonOverlappingPosition = (newBushes) => {\n    let newPosition;\n    let isOverlapping;\n\n    do {\n      isOverlapping = false;\n      newPosition = generateRandomPosition();\n\n      for (const bush of newBushes) {\n        if (\n          newPosition.x < bush.x + bushSize &&\n          newPosition.x + bushSize > bush.x &&\n          newPosition.y < bush.y + bushSize &&\n          newPosition.y + bushSize > bush.y\n        ) {\n          isOverlapping = true;\n          break;\n        }\n      }\n    } while (isOverlapping);\n\n    return newPosition;\n  };\n\n  useEffect(() => {\n    const initialBushes = [];\n    while (initialBushes.length < initialBushesSet) {\n      const newPosition = generateNonOverlappingPosition(initialBushes);\n      initialBushes.push(newPosition);\n    }\n\n    setBushes(initialBushes);\n  }, []);\n\n  useEffect(() => {\n    const moleInterval = setInterval(() => {\n      setMoleVisible(true);\n\n      setTimeout(() => {\n        setMoleVisible(false);\n      }, 1250 - score * 25);\n    }, 2000 - score * 35);\n\n    return () => {\n      clearInterval(moleInterval);\n    };\n  }, [score]);\n\n  useEffect(() => {\n    const animationDuration = 200; // Adjust the animation duration as needed\n\n    const animateDestroyMimics = () => {\n      setDestroyMimics((prevMimics) => {\n        const updatedMimics = [...prevMimics];\n\n        for (let i = 0; i < maxSimultaneousAnimations; i++) {\n          if (updatedMimics.length === 0) break; // No more mimics to animate\n          \n          const mimic = updatedMimics.pop();\n          const circles = document.querySelectorAll(`.fakebush${mimic.uniqueKey} .fakecircle`);\n          if (circles.length > 0) {\n            const firstCircle = circles[0];\n            firstCircle.style.transform = 'scale(0)';\n            setTimeout(() => {\n              firstCircle.remove();\n              if (circles.length > 1) {\n                // If there are more circles, keep the animation going\n                requestAnimationFrame(animateDestroyMimics);\n              }\n            }, animationDuration);\n          }\n        }\n        \n        return updatedMimics;\n      });\n    };\n\n    const interval = setInterval(() => {\n      if (destroyMimics.length > 0) {\n        // Start animations for each destroy mimic\n        for (let i = 0; i < maxSimultaneousAnimations; i++) {\n          requestAnimationFrame(animateDestroyMimics);\n        }\n      }\n    }, 50); // Adjust the interval as needed\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [destroyMimics]);\n  \n  \n  \n  \n  const handleMoleClick = (index) => {\n    createNewBushes(index);\n    if (moleVisible && index === moleIndex) {\n      setScore((prevScore) => prevScore + 1);\n      setMoleVisible(false);\n    } else if (index !== moleIndex) {\n      setPenalty((prevPenalty) => prevPenalty + 1);\n    }\n  };\n\n  const handleBushClick = (index) => {\n    createNewBushes(index);\n    if(moleVisible && index === moleIndex){\n      setScore((prevScore) => prevScore + 1);\n      setMoleVisible(false);\n    }else{\n      setPenalty((prevPenalty) => prevPenalty + 1);\n    }\n  };\n\n  const createNewBushes = (indexToRemove) => {\n    const newBushes = bushes.filter((_, index) => index !== indexToRemove);\n\n    // Execute DestroyBushMimic\n    const uniqueKey = Date.now(); // Unique key for the fake bush\n    let newDestroyMimic = ({x: bushes[indexToRemove].x, y: bushes[indexToRemove].y, uniqueKey: uniqueKey});\n    destroyMimics.push(newDestroyMimic);\n    if (Math.random() < 0.75) {\n      const newPosition = generateNonOverlappingPosition(newBushes);\n      newBushes.push(newPosition);\n\n      // Execute CreateBushMimic\n      //setCreateMimic({ x: newPosition.x, y: newPosition.y });\n    }\n\n    if (newBushes.length <= 0) {\n      console.log(\"gameoverlmao\");\n      onGameOver();\n    }\n\n    setBushes(newBushes);\n  };\n\n  return (\n    <>\n\n      {/* Render the DestroyBushMimic and CreateBushMimic components */}\n      {destroyMimics && destroyMimics.map((mimic) => (\n        <DestroyBushMimic x={mimic.x} y={mimic.y} uniqueKey={mimic.uniqueKey} />\n      ))}\n      {createMimic && (\n        <CreateBushMimic x={createMimic.x} y={createMimic.y} />\n      )}\n\n      {/* Render the Bush component */}\n      <Bush\n        bushes={bushes}\n        moleIndex={moleIndex}\n        moleVisible={moleVisible}\n        molePosition={molePosition}\n        handleMoleClick={handleMoleClick}\n        handleBushClick={handleBushClick}\n      />\n    </>\n  );\n};\n\nexport default RunTime;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}