{"ast":null,"code":"var _jsxFileName = \"/home/jamie1053/Documents/CodingRelated/Personal/chatgpt-molegame/frontend/src/components/RunTime.js\",\n  _s = $RefreshSig$();\n// RunTime.js\nimport React, { useState, useEffect } from 'react';\nimport Bush from './Bush';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RunTime = ({\n  setScore,\n  score,\n  onGameOver,\n  setPenalty\n}) => {\n  _s();\n  const bushSize = 80;\n  const initialBushesSet = 7;\n  const [bushes, setBushes] = useState([]);\n  const [moleIndex, setMoleIndex] = useState(null);\n  const [nextMoleIndex, setNextMoleIndex] = useState(null);\n  const [moleVisible, setMoleVisible] = useState(false);\n  const [molePosition, setMolePosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [destroyingBush, setDestroyingBush] = useState(null);\n  const generateRandomPosition = () => {\n    const x = Math.random() * (screen.availWidth - 120);\n    const y = screen.availHeight / 2 + Math.random() * (screen.availHeight / 2 - 120);\n    return {\n      x,\n      y\n    };\n  };\n  const generateNonOverlappingPosition = newBushes => {\n    let newPosition;\n    let isOverlapping;\n    do {\n      isOverlapping = false;\n      newPosition = generateRandomPosition();\n      for (const bush of newBushes) {\n        if (newPosition.x < bush.x + bushSize && newPosition.x + bushSize > bush.x && newPosition.y < bush.y + bushSize && newPosition.y + bushSize > bush.y) {\n          isOverlapping = true;\n          break;\n        }\n      }\n    } while (isOverlapping);\n    return newPosition;\n  };\n  useEffect(() => {\n    const initialBushes = [];\n    while (initialBushes.length < initialBushesSet) {\n      const newPosition = generateNonOverlappingPosition(initialBushes);\n      initialBushes.push(newPosition);\n    }\n    setBushes(initialBushes);\n  }, []);\n  useEffect(() => {\n    const moleInterval = setInterval(() => {\n      setMoleVisible(true);\n      setTimeout(() => {\n        setMoleVisible(false);\n      }, 1250 - score * 25);\n    }, 2000 - score * 35);\n    return () => {\n      clearInterval(moleInterval);\n    };\n  }, [score]);\n  useEffect(() => {\n    setNextMoleIndex(Math.floor(Math.random() * bushes.length));\n    if (!moleVisible && nextMoleIndex !== null) {\n      setMoleIndex(nextMoleIndex);\n      setMolePosition({\n        ...bushes[nextMoleIndex]\n      });\n    }\n  }, [moleVisible, nextMoleIndex, bushes]);\n  const destroyBush = (x, y) => {\n    // Create a new bush instantly\n    const newBush = generateNonOverlappingPosition(bushes.concat({\n      x,\n      y\n    }));\n\n    // Add the new bush to the destroyingBush state\n    setDestroyingBush(newBush);\n\n    // Gradually remove circles every 50ms\n    let i = newBush.circles.length - 1;\n    const removeInterval = setInterval(() => {\n      if (i >= 0) {\n        const updatedBush = {\n          ...newBush\n        };\n        updatedBush.circles.splice(i, 1);\n        setDestroyingBush(updatedBush);\n        i--;\n      } else {\n        // All circles are removed, stop the interval and reset the state\n        clearInterval(removeInterval);\n        setDestroyingBush(null);\n      }\n    }, 50);\n  };\n  const handleMoleClick = index => {\n    createNewBushes(index);\n    if (moleVisible && index === moleIndex) {\n      setScore(prevScore => prevScore + 1);\n      setMoleVisible(false);\n    } else if (index !== moleIndex) {\n      setPenalty(prevPenalty => prevPenalty + 1);\n    }\n  };\n  const handleBushClick = index => {\n    createNewBushes(index);\n    if (moleVisible && index === moleIndex) {\n      setScore(prevScore => prevScore + 1);\n      setMoleVisible(false);\n    } else {\n      setPenalty(prevPenalty => prevPenalty + 1);\n    }\n  };\n  const createNewBushes = indexToRemove => {\n    const newBushes = bushes.filter((_, index) => index !== indexToRemove);\n    //execute destroy bush mimic using the indexToRemove bush x,y\n\n    if (Math.random() < 0.75) {\n      const newPosition = generateNonOverlappingPosition(newBushes);\n      newBushes.push(newPosition);\n\n      //execute create bush mimic using newPosition x and y\n    }\n\n    if (newBushes.length <= 0) {\n      console.log(\"gameoverlmao\");\n      onGameOver();\n    }\n    setBushes(newBushes);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Bush, {\n      bushes: bushes,\n      moleIndex: moleIndex,\n      moleVisible: moleVisible,\n      molePosition: molePosition,\n      handleMoleClick: handleMoleClick,\n      handleBushClick: handleBushClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(RunTime, \"TlmVB3g/bm5mjgRYyphGFOqneQM=\");\n_c = RunTime;\nexport default RunTime;\nvar _c;\n$RefreshReg$(_c, \"RunTime\");","map":{"version":3,"names":["React","useState","useEffect","Bush","jsxDEV","_jsxDEV","Fragment","_Fragment","RunTime","setScore","score","onGameOver","setPenalty","_s","bushSize","initialBushesSet","bushes","setBushes","moleIndex","setMoleIndex","nextMoleIndex","setNextMoleIndex","moleVisible","setMoleVisible","molePosition","setMolePosition","x","y","destroyingBush","setDestroyingBush","generateRandomPosition","Math","random","screen","availWidth","availHeight","generateNonOverlappingPosition","newBushes","newPosition","isOverlapping","bush","initialBushes","length","push","moleInterval","setInterval","setTimeout","clearInterval","floor","destroyBush","newBush","concat","i","circles","removeInterval","updatedBush","splice","handleMoleClick","index","createNewBushes","prevScore","prevPenalty","handleBushClick","indexToRemove","filter","_","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jamie1053/Documents/CodingRelated/Personal/chatgpt-molegame/frontend/src/components/RunTime.js"],"sourcesContent":["// RunTime.js\nimport React, { useState, useEffect } from 'react';\nimport Bush from './Bush';\n\nconst RunTime = ({ setScore, score, onGameOver, setPenalty }) => {\n  const bushSize = 80;\n  const initialBushesSet = 7;\n\n  const [bushes, setBushes] = useState([]);\n  const [moleIndex, setMoleIndex] = useState(null);\n  const [nextMoleIndex, setNextMoleIndex] = useState(null);\n  const [moleVisible, setMoleVisible] = useState(false);\n  const [molePosition, setMolePosition] = useState({ x: 0, y: 0 });\n  const [destroyingBush, setDestroyingBush] = useState(null);\n\n  const generateRandomPosition = () => {\n    const x = Math.random() * (screen.availWidth - 120);\n    const y = (screen.availHeight / 2) + (Math.random() * ((screen.availHeight / 2) - 120));\n    return { x, y };\n  };\n\n  const generateNonOverlappingPosition = (newBushes) => {\n    let newPosition;\n    let isOverlapping;\n\n    do {\n      isOverlapping = false;\n      newPosition = generateRandomPosition();\n\n      for (const bush of newBushes) {\n        if (\n          newPosition.x < bush.x + bushSize &&\n          newPosition.x + bushSize > bush.x &&\n          newPosition.y < bush.y + bushSize &&\n          newPosition.y + bushSize > bush.y\n        ) {\n          isOverlapping = true;\n          break;\n        }\n      }\n    } while (isOverlapping);\n\n    return newPosition;\n  };\n\n  useEffect(() => {\n    const initialBushes = [];\n    while (initialBushes.length < initialBushesSet) {\n      const newPosition = generateNonOverlappingPosition(initialBushes);\n      initialBushes.push(newPosition);\n    }\n\n    setBushes(initialBushes);\n  }, []);\n\n  useEffect(() => {\n    const moleInterval = setInterval(() => {\n      setMoleVisible(true);\n\n      setTimeout(() => {\n        setMoleVisible(false);\n      }, 1250 - score * 25);\n    }, 2000 - score * 35);\n\n    return () => {\n      clearInterval(moleInterval);\n    };\n  }, [score]);\n\n  useEffect(() => {\n    setNextMoleIndex(Math.floor(Math.random() * bushes.length));\n    if (!moleVisible && nextMoleIndex !== null) {\n      setMoleIndex(nextMoleIndex);\n      setMolePosition({ ...bushes[nextMoleIndex] });\n    }\n  }, [moleVisible, nextMoleIndex, bushes]);\n\n  const destroyBush = (x, y) => {\n    // Create a new bush instantly\n    const newBush = generateNonOverlappingPosition(bushes.concat({ x, y }));\n\n    // Add the new bush to the destroyingBush state\n    setDestroyingBush(newBush);\n\n    // Gradually remove circles every 50ms\n    let i = newBush.circles.length - 1;\n    const removeInterval = setInterval(() => {\n      if (i >= 0) {\n        const updatedBush = { ...newBush };\n        updatedBush.circles.splice(i, 1);\n        setDestroyingBush(updatedBush);\n        i--;\n      } else {\n        // All circles are removed, stop the interval and reset the state\n        clearInterval(removeInterval);\n        setDestroyingBush(null);\n      }\n    }, 50);\n  };\n  \n  const handleMoleClick = (index) => {\n    createNewBushes(index);\n    if (moleVisible && index === moleIndex) {\n      setScore((prevScore) => prevScore + 1);\n      setMoleVisible(false);\n    } else if (index !== moleIndex) {\n      setPenalty((prevPenalty) => prevPenalty + 1);\n    }\n  };\n\n  const handleBushClick = (index) => {\n    createNewBushes(index);\n    if(moleVisible && index === moleIndex){\n      setScore((prevScore) => prevScore + 1);\n      setMoleVisible(false);\n    }else{\n      setPenalty((prevPenalty) => prevPenalty + 1);\n    }\n  };\n\n  const createNewBushes = (indexToRemove) => {\n    const newBushes = bushes.filter((_, index) => index !== indexToRemove);\n    //execute destroy bush mimic using the indexToRemove bush x,y\n\n    if (Math.random() < 0.75) {\n      const newPosition = generateNonOverlappingPosition(newBushes);\n      newBushes.push(newPosition);\n\n      //execute create bush mimic using newPosition x and y\n    }\n\n    if (newBushes.length <= 0) {\n      console.log(\"gameoverlmao\");\n      onGameOver();\n    }\n\n    setBushes(newBushes);\n  };\n\n  return (\n    <>\n      {/* Render the Bush component */}\n      <Bush\n        bushes={bushes}\n        moleIndex={moleIndex}\n        moleVisible={moleVisible}\n        molePosition={molePosition}\n        handleMoleClick={handleMoleClick}\n        handleBushClick={handleBushClick}\n      />\n    </>\n  );\n};\n\nexport default RunTime;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}